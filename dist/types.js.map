{"version":3,"sources":["../src/types.ts"],"sourcesContent":["interface CommonThartOptions {\n  /**\n   * The grace period for shutting down worker processes in milliseconds.\n   * This determines how long to wait for workers to finish their tasks before forcefully terminating them.\n   *\n   * @default 10000 (10 seconds)\n   */\n  grace?: number;\n}\n\ntype PrimaryFunction = {\n  /**\n   * A function to be executed in the primary process (there is only one primary process).\n   */\n  start: () => Promise<void> | void;\n  /**\n   * A function to be executed in the primary process when the primary process is shutting down.\n   * This gets invoked AFTER all worker processes have been shut down.\n   */\n  stop?: () => Promise<void> | void;\n};\n\ntype WorkerCount = {\n  /**\n   * A function to be executed in each worker process when the worker process is shutting down.\n   * @param id - The id of the worker process.\n   * @returns A promise that resolves when the worker process has completed.\n   */\n  /**\n   * The number of worker processes to spawn.\n   */\n  count: number;\n};\n\ntype WorkerFunction = {\n  /**\n   * A function to be executed in each worker process (there is no limit to the number of worker processes).\n   * @param id - The id of the worker process.\n   * @returns A promise that resolves when the worker process has completed.\n   */\n  start: (id: number) => Promise<void> | void;\n  /**\n   * The type of worker process to use.\n   * \"childProcess\" will use Node.js child processes.\n   * \"cluster\" will use Node.js cluster module.\n   *\n   * You should use:\n   * - \"cluster\" allows TCP servers to be shared between workers and is thus recommended when using TCP servers.\n   * - \"childProcess\" is recommended for CPU-bound tasks / jobs that can be run independently.\n   */\n  type: \"childProcess\" | \"cluster\";\n  /**\n   * Determines whether the worker process should be terminated after completing its task.\n   * By default, when all work in the process is done, the node process that executed the worker is still kept alive.\n   * If you want to terminate the node process after completing its task, set this to true.\n   *\n   * @default false\n   */\n  killAfterCompleted?: boolean;\n  /**\n   * A function to be executed in each worker process when the worker process is shutting down.\n   */\n  stop?: () => Promise<void> | void;\n  /**\n   * The timeout duration for the worker function in milliseconds.\n   * If the worker function takes longer than this duration, it will be forcefully terminated.\n   *\n   * @default 3000 (3 seconds)\n   */\n  startupTimeoutMs?: number;\n};\n\ntype PrimaryThartOptions = CommonThartOptions & {\n  primary: PrimaryFunction;\n};\n\ntype WorkerThartOptions = CommonThartOptions & {\n  worker: WorkerFunction & WorkerCount;\n};\n\ntype WorkerArrayThartOptions = CommonThartOptions & {\n  worker: (WorkerFunction & Partial<WorkerCount>)[];\n};\n\ntype PrimaryAndSingleWorkerOptions = PrimaryThartOptions & WorkerThartOptions;\n\ntype PrimaryAndArrayWorkerOptions = PrimaryThartOptions &\n  WorkerArrayThartOptions;\n\ntype ThartOptions =\n  | PrimaryThartOptions\n  | WorkerThartOptions\n  | WorkerArrayThartOptions\n  | PrimaryAndSingleWorkerOptions\n  | PrimaryAndArrayWorkerOptions;\n\ninterface NormalizedThartOptions {\n  primary: PrimaryFunction | undefined;\n  worker: WorkerFunction[];\n  grace: number;\n}\n\nexport const WORKER_TYPES = {\n  child: \"childProcess\",\n  cluster: \"cluster\",\n} as const;\n\nexport type {\n  ThartOptions,\n  NormalizedThartOptions,\n  PrimaryAndArrayWorkerOptions,\n  PrimaryAndSingleWorkerOptions,\n  PrimaryFunction,\n  PrimaryThartOptions,\n  WorkerArrayThartOptions,\n  WorkerCount,\n  WorkerThartOptions,\n  WorkerFunction,\n};\n"],"mappings":";;;;;;;;;;;;;;;;;;;;AAAA;AAAA;AAAA;AAAA;AAAA;AAsGO,IAAM,eAAe;AAAA,EAC1B,OAAO;AAAA,EACP,SAAS;AACX;","names":[]}